package generation;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import generation.Factory;
import generation.Order;



public class MazeFactoryTest {
	private MazeContainer maze;  // setup makes this a width x height cells object
	private StubOrder stub; // setup makes this a 1x1 cells object 
	@Before
	public void setUp() throws Exception {

		//create MazeFactory object 
		MazeFactory mazeFactory = new MazeFactory(true);

		//create a Stub object
		StubOrder stub = new StubOrder(0, Order.Builder.Prim); 

		mazeFactory.order(stub); 
		mazeFactory.waitTillDelivered(); 
		maze = (MazeContainer)stub.getMaze();

		//call order

		//bulidOrder using Stub

	}

	@Test
	// tests for the existence of an exit in the maze
	public void exitExists() {
		int[] exit = null;
		Distance dist = maze.getMazedists(); 
		int[][] distances = dist.getDists(); 
		if (distances != null) {
			// confirms that exit exits
			exit = dist.getExitPosition();
		}
		assertNotNull("Maze has no exit", exit);

	}
	
	@Test
	// Checks that every cell has a solution (distance to exit)
	public void distToExit() {
		Distance dist = maze.getMazedists(); 
		int[][] distances = dist.getDists();
		for(int row = 0; row < distances.length; row++){
			for(int col = 0; col < distances.length; col++){
				assertTrue(maze.getDistanceToExit(row, col) != Integer.MAX_VALUE);
			}

		}
		
	}
	




}
